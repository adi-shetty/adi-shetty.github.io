{"version":3,"sources":["RadarGraph.jsx","App.js","serviceWorker.js","index.js"],"names":["Chart","defaults","global","legend","display","ChartComponent","state","data","type","labels","datasets","borderWidth","pointRadius","lineTension","backgroundColor","pointBackgroundColor","pointBorderColor","className","width","height","this","options","responsive","scale","pointLabels","fontColor","fontFamily","fontSize","angleLines","color","lineWidth","gridLines","circular","ticks","max","min","stepSize","tooltips","mode","hover","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAGAA,IAAMC,SAASC,OAAOC,OAAOC,SAAU,E,IAElBC,E,2MACnBC,MAAQ,CACNC,KAAM,CACJC,KAAM,QACNC,OAAQ,CACN,cACA,QACA,UACA,QACA,MACA,iBAEFC,SAAU,CACR,CACEH,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3BI,YAAa,EACbC,YAAa,EACbC,YAAa,GACbC,gBAAiB,uBAEnB,CACEP,KAAM,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAC3BI,YAAa,EACbC,YAAa,EACbC,YAAa,GACbC,gBAAiB,mBAEnB,CACEP,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAChCI,YAAa,EACbC,YAAa,EACbG,qBAAsB,mBACtBC,iBAAkB,mBAClBH,YAAa,GACbC,gBAAiB,0B,wEAOvB,OACE,yBAAKG,UAAU,gBACb,kBAAC,IAAD,CACEC,MAAM,OACNC,OAAO,OACPZ,KAAMa,KAAKd,MAAMC,KACjBc,QAAS,CACPC,YAAY,EACZC,MAAO,CACLC,YAAa,CACXC,UAAW,iBACXC,WAAY,8BACZC,SAAU,MAEZC,WAAY,CACVxB,SAAS,EACTyB,MAAO,mBACPC,UAAW,IAEbC,UAAW,CACTF,MAAO,mBACPG,UAAU,EACVF,UAAW,GAEbG,MAAO,CACL7B,SAAS,EACT8B,IAAK,IACLC,IAAK,EACLC,SAAU,KAGdC,SAAU,CACRC,KAAM,SAERC,MAAO,CACLD,KAAM,iB,GA5EwBE,aCQ7BC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.762f08ad.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Chart, Radar } from \"react-chartjs-2\";\r\nimport \"./App.css\";\r\nChart.defaults.global.legend.display = false;\r\n\r\nexport default class ChartComponent extends Component {\r\n  state = {\r\n    data: {\r\n      type: \"radar\",\r\n      labels: [\r\n        \"Application\",\r\n        \"Patch\",\r\n        \"Network\",\r\n        \"Email\",\r\n        \"DNS\",\r\n        \"IP Reputation\"\r\n      ],\r\n      datasets: [\r\n        {\r\n          data: [80, 60, 45, 30, 65, 40],\r\n          borderWidth: 0,\r\n          pointRadius: 0,\r\n          lineTension: 0.6,\r\n          backgroundColor: \"rgba(227,65,84,0.7)\"\r\n        },\r\n        {\r\n          data: [40, 60, 70, 55, 90, 30],\r\n          borderWidth: 0,\r\n          pointRadius: 0,\r\n          lineTension: 0.6,\r\n          backgroundColor: \"rgb(251,206,63)\"\r\n        },\r\n        {\r\n          data: [100, 100, 100, 100, 100, 100],\r\n          borderWidth: 0,\r\n          pointRadius: 3,\r\n          pointBackgroundColor: \"rgb(233,235,241)\",\r\n          pointBorderColor: \"rgb(233,235,241)\",\r\n          lineTension: 0.4,\r\n          backgroundColor: \"rgba(255,255,255,0)\"\r\n        }\r\n      ]\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"radar-canvas\">\r\n        <Radar\r\n          width=\"100%\"\r\n          height=\"100%\"\r\n          data={this.state.data}\r\n          options={{\r\n            responsive: true,\r\n            scale: {\r\n              pointLabels: {\r\n                fontColor: \"rgb(80,93,111)\",\r\n                fontFamily: \"Poppins-Regular, sans-serif\",\r\n                fontSize: \"12\"\r\n              },\r\n              angleLines: {\r\n                display: true,\r\n                color: \"rgb(233,235,241)\",\r\n                lineWidth: 0.6\r\n              },\r\n              gridLines: {\r\n                color: \"rgb(233,235,241)\",\r\n                circular: true,\r\n                lineWidth: 1\r\n              },\r\n              ticks: {\r\n                display: false,\r\n                max: 100,\r\n                min: 0,\r\n                stepSize: 25\r\n              }\r\n            },\r\n            tooltips: {\r\n              mode: \"index\"\r\n            },\r\n            hover: {\r\n              mode: \"index\"\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport RadarGraph from \"./RadarGraph\";\n\nfunction App() {\n  return (\n    <div>\n      <RadarGraph />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}